{"ast":null,"code":"var _jsxFileName = \"/Users/joseph/Documents/Work/personal/portfolio/src/context/AppContext.jsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useReducer } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AppReducer = (state, action) => {\n  let budget = 0;\n  switch (action.type) {\n    case 'ADD_EXPENSE':\n      let total_budget = 0;\n      total_budget = state.expenses.reduce((previousExp, currentExp) => {\n        return previousExp + currentExp.cost;\n      }, 0);\n      total_budget = total_budget + action.payload.cost;\n      action.type = \"DONE\";\n      if (total_budget <= state.budget) {\n        total_budget = 0;\n        state.expenses.map(currentExp => {\n          if (currentExp.name === action.payload.name) {\n            currentExp.cost = action.payload.cost + currentExp.cost;\n          }\n          return currentExp;\n        });\n        return {\n          ...state\n        };\n      } else {\n        alert(\"Cannot increase the allocation! Out of funds\");\n        return {\n          ...state\n        };\n      }\n    case 'RED_EXPENSE':\n      const red_expenses = state.expenses.map(currentExp => {\n        if (currentExp.name === action.payload.name && currentExp.cost - action.payload.cost >= 0) {\n          currentExp.cost = currentExp.cost - action.payload.cost;\n          budget = state.budget + action.payload.cost;\n        }\n        return currentExp;\n      });\n      action.type = \"DONE\";\n      return {\n        ...state,\n        expenses: [...red_expenses]\n      };\n    case 'DELETE_EXPENSE':\n      action.type = \"DONE\";\n      state.expenses.map(currentExp => {\n        if (currentExp.name === action.payload) {\n          budget = state.budget + currentExp.cost;\n          currentExp.cost = 0;\n        }\n        return currentExp;\n      });\n      action.type = \"DONE\";\n      return {\n        ...state,\n        budget\n      };\n    case 'SET_BUDGET':\n      action.type = \"DONE\";\n      state.budget = action.payload;\n      let totalExpenses = 0;\n      state.expenses.forEach(element => {\n        totalExpenses = totalExpenses + element.cost;\n      });\n      if (state.budget > 20000) {\n        alert(\"Cannot exceed to 20000 budget!\");\n        state.budget = 20000;\n      }\n      if (totalExpenses > state.budget) {\n        alert(\"Budget cannot be below total expenses.\");\n        state.budget = totalExpenses;\n      }\n      return {\n        ...state,\n        budget\n      };\n    case 'CHG_CURRENCY':\n      action.type = \"DONE\";\n      state.currency = action.payload;\n      return {\n        ...state\n      };\n    default:\n      return state;\n  }\n};\n\n// 1. Sets the initial state when the app loads\n_c = AppReducer;\nconst initialState = {\n  aboutMe: \"show\",\n  projects: \"hide\",\n  skills: \"hide\"\n};\n\n// 2. Creates the context this is the thing our components import and use to get the state\nexport const AppContext = /*#__PURE__*/createContext();\n\n// 3. Provider component - wraps the components we want to give access to the state\n// Accepts the children, which are the nested(wrapped) components\nexport const AppProvider = props => {\n  _s();\n  // 4. Sets up the app state. takes a reducer, and an initial state\n  const [state, dispatch] = useReducer(initialState);\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: {\n      aboutMe: state.aboutMe,\n      // skills: state.skills,\n      // projects: state.projects,\n      dispatch\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 9\n  }, this);\n};\n_s(AppProvider, \"GLYnMQ8Xkooi29FkxmARXYan304=\");\n_c2 = AppProvider;\nvar _c, _c2;\n$RefreshReg$(_c, \"AppReducer\");\n$RefreshReg$(_c2, \"AppProvider\");","map":{"version":3,"names":["React","createContext","useReducer","jsxDEV","_jsxDEV","AppReducer","state","action","budget","type","total_budget","expenses","reduce","previousExp","currentExp","cost","payload","map","name","alert","red_expenses","totalExpenses","forEach","element","currency","_c","initialState","aboutMe","projects","skills","AppContext","AppProvider","props","_s","dispatch","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["/Users/joseph/Documents/Work/personal/portfolio/src/context/AppContext.jsx"],"sourcesContent":["import React, { createContext, useReducer } from 'react';\n\n\nexport const AppReducer = (state, action) => {\n    let budget = 0;\n    switch (action.type) {\n        case 'ADD_EXPENSE':\n            let total_budget = 0;\n            total_budget = state.expenses.reduce(\n                (previousExp, currentExp) => {\n                    return previousExp + currentExp.cost\n                },0\n            );\n            total_budget = total_budget + action.payload.cost;\n            action.type = \"DONE\";\n            if(total_budget <= state.budget) {\n                total_budget = 0;\n                state.expenses.map((currentExp)=> {\n                    if(currentExp.name === action.payload.name) {\n                        currentExp.cost = action.payload.cost + currentExp.cost;\n                    }\n                    return currentExp\n                });\n                return {\n                    ...state,\n                };\n            } else {\n                alert(\"Cannot increase the allocation! Out of funds\");\n                return {\n                    ...state\n                }\n            }\n            case 'RED_EXPENSE':\n                const red_expenses = state.expenses.map((currentExp)=> {\n                    if (currentExp.name === action.payload.name && currentExp.cost - action.payload.cost >= 0) {\n                        currentExp.cost =  currentExp.cost - action.payload.cost;\n                        budget = state.budget + action.payload.cost\n                    }\n                    return currentExp\n                })\n                action.type = \"DONE\";\n                return {\n                    ...state,\n                    expenses: [...red_expenses],\n                };\n            case 'DELETE_EXPENSE':\n            action.type = \"DONE\";\n            state.expenses.map((currentExp)=> {\n                if (currentExp.name === action.payload) {\n                    budget = state.budget + currentExp.cost\n                    currentExp.cost =  0;\n                }\n                return currentExp\n            })\n            action.type = \"DONE\";\n            return {\n                ...state,\n                budget\n            };\n        case 'SET_BUDGET':\n            action.type = \"DONE\";\n            state.budget = action.payload;\n            let totalExpenses =0;\n            state.expenses.forEach(element => {\n                totalExpenses = totalExpenses + element.cost;\n            });\n            if(state.budget>20000){\n                alert(\"Cannot exceed to 20000 budget!\");\n                state.budget = 20000;\n            }\n            if(totalExpenses>state.budget){\n                alert(\"Budget cannot be below total expenses.\");\n                state.budget = totalExpenses;\n            }\n            return {\n                ...state,\n                budget\n            };\n        case 'CHG_CURRENCY':\n            action.type = \"DONE\";\n            state.currency = action.payload;\n            return {\n                ...state,\n            }\n\n        default:\n            return state;\n    }\n};\n\n\n// 1. Sets the initial state when the app loads\nconst initialState = {\n    aboutMe : \"show\",\n    projects : \"hide\",\n    skills : \"hide\"\n};\n\n// 2. Creates the context this is the thing our components import and use to get the state\nexport const AppContext = createContext();\n\n// 3. Provider component - wraps the components we want to give access to the state\n// Accepts the children, which are the nested(wrapped) components\nexport const AppProvider = (props) => {\n    // 4. Sets up the app state. takes a reducer, and an initial state\n    const [state, dispatch] = useReducer(initialState);\n   \n\n    return (\n        <AppContext.Provider\n            value={{\n                aboutMe: state.aboutMe,\n                // skills: state.skills,\n                // projects: state.projects,\n                dispatch\n            }}\n        >\n            {props.children}\n        </AppContext.Provider>\n    );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
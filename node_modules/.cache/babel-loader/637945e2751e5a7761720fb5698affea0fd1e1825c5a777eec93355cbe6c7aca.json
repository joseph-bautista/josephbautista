{"ast":null,"code":"import _slicedToArray from\"/Users/joseph/Documents/Work/personal/portfolio/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{createContext,useReducer}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";export var AppReducer=function AppReducer(state,action){var aboutMe=\"show\";state.aboutMe=aboutMe;return state;};// 1. Sets the initial state when the app loads\nvar initialState={aboutMe:\"show\",projects:\"hide\",skills:\"hide\"};// 2. Creates the context this is the thing our components import and use to get the state\nexport var AppContext=/*#__PURE__*/createContext();// 3. Provider component - wraps the components we want to give access to the state\n// Accepts the children, which are the nested(wrapped) components\nexport var AppProvider=function AppProvider(props){// 4. Sets up the app state. takes a reducer, and an initial state\nvar _useReducer=useReducer(initialState),_useReducer2=_slicedToArray(_useReducer,2),state=_useReducer2[0],dispatch=_useReducer2[1];return/*#__PURE__*/_jsx(AppContext.Provider,{value:{// aboutMe: state.aboutMe,\n// skills: state.skills,\n// projects: state.projects,\ndispatch:dispatch},children:props.children});};","map":{"version":3,"names":["React","createContext","useReducer","jsx","_jsx","AppReducer","state","action","aboutMe","initialState","projects","skills","AppContext","AppProvider","props","_useReducer","_useReducer2","_slicedToArray","dispatch","Provider","value","children"],"sources":["/Users/joseph/Documents/Work/personal/portfolio/src/context/AppContext.jsx"],"sourcesContent":["import React, { createContext, useReducer } from 'react';\n\n\nexport const AppReducer = (state, action) => {\n    let aboutMe = \"show\";\n    state.aboutMe = aboutMe;\n    return state;\n};\n\n\n// 1. Sets the initial state when the app loads\nconst initialState = {\n    aboutMe : \"show\",\n    projects : \"hide\",\n    skills : \"hide\"\n};\n\n// 2. Creates the context this is the thing our components import and use to get the state\nexport const AppContext = createContext();\n\n// 3. Provider component - wraps the components we want to give access to the state\n// Accepts the children, which are the nested(wrapped) components\nexport const AppProvider = (props) => {\n    // 4. Sets up the app state. takes a reducer, and an initial state\n    const [state, dispatch] = useReducer(initialState);\n   \n\n    return (\n        <AppContext.Provider\n            value={{\n                // aboutMe: state.aboutMe,\n                // skills: state.skills,\n                // projects: state.projects,\n                dispatch\n            }}\n        >\n            {props.children}\n        </AppContext.Provider>\n    );\n};\n"],"mappings":"qIAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,UAAU,KAAQ,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAGzD,MAAO,IAAM,CAAAC,UAAU,CAAG,QAAb,CAAAA,UAAUA,CAAIC,KAAK,CAAEC,MAAM,CAAK,CACzC,GAAI,CAAAC,OAAO,CAAG,MAAM,CACpBF,KAAK,CAACE,OAAO,CAAGA,OAAO,CACvB,MAAO,CAAAF,KAAK,CAChB,CAAC,CAGD;AACA,GAAM,CAAAG,YAAY,CAAG,CACjBD,OAAO,CAAG,MAAM,CAChBE,QAAQ,CAAG,MAAM,CACjBC,MAAM,CAAG,MACb,CAAC,CAED;AACA,MAAO,IAAM,CAAAC,UAAU,cAAGX,aAAa,EAAE,CAEzC;AACA;AACA,MAAO,IAAM,CAAAY,WAAW,CAAG,QAAd,CAAAA,WAAWA,CAAIC,KAAK,CAAK,CAClC;AACA,IAAAC,WAAA,CAA0Bb,UAAU,CAACO,YAAY,CAAC,CAAAO,YAAA,CAAAC,cAAA,CAAAF,WAAA,IAA3CT,KAAK,CAAAU,YAAA,IAAEE,QAAQ,CAAAF,YAAA,IAGtB,mBACIZ,IAAA,CAACQ,UAAU,CAACO,QAAQ,EAChBC,KAAK,CAAE,CACH;AACA;AACA;AACAF,QAAQ,CAARA,QACJ,CAAE,CAAAG,QAAA,CAEDP,KAAK,CAACO,QAAQ,EACG,CAE9B,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}
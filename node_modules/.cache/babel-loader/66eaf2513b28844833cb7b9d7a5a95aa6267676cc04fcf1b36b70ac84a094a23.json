{"ast":null,"code":"var _jsxFileName = \"/Users/joseph/Documents/Work/personal/portfolio/src/context/AppContext.jsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useReducer } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AppReducer = (state, action) => {\n  let aboutMe = \"show\";\n  state.aboutMe = aboutMe;\n  return state;\n};\n\n// 1. Sets the initial state when the app loads\n_c = AppReducer;\nconst initialState = {\n  aboutMe: \"show\",\n  projects: \"hide\",\n  skills: \"hide\"\n};\n\n// 2. Creates the context this is the thing our components import and use to get the state\nexport const AppContext = /*#__PURE__*/createContext();\n\n// 3. Provider component - wraps the components we want to give access to the state\n// Accepts the children, which are the nested(wrapped) components\nexport const AppProvider = props => {\n  _s();\n  // 4. Sets up the app state. takes a reducer, and an initial state\n  const [state, dispatch] = useReducer(initialState);\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: {\n      aboutMe: state.aboutMe,\n      // skills: state.skills,\n      // projects: state.projects,\n      dispatch\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this);\n};\n_s(AppProvider, \"GLYnMQ8Xkooi29FkxmARXYan304=\");\n_c2 = AppProvider;\nvar _c, _c2;\n$RefreshReg$(_c, \"AppReducer\");\n$RefreshReg$(_c2, \"AppProvider\");","map":{"version":3,"names":["React","createContext","useReducer","jsxDEV","_jsxDEV","AppReducer","state","action","aboutMe","_c","initialState","projects","skills","AppContext","AppProvider","props","_s","dispatch","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["/Users/joseph/Documents/Work/personal/portfolio/src/context/AppContext.jsx"],"sourcesContent":["import React, { createContext, useReducer } from 'react';\n\n\nexport const AppReducer = (state, action) => {\n    let aboutMe = \"show\";\n    state.aboutMe = aboutMe;\n    return state;\n};\n\n\n// 1. Sets the initial state when the app loads\nconst initialState = {\n    aboutMe : \"show\",\n    projects : \"hide\",\n    skills : \"hide\"\n};\n\n// 2. Creates the context this is the thing our components import and use to get the state\nexport const AppContext = createContext();\n\n// 3. Provider component - wraps the components we want to give access to the state\n// Accepts the children, which are the nested(wrapped) components\nexport const AppProvider = (props) => {\n    // 4. Sets up the app state. takes a reducer, and an initial state\n    const [state, dispatch] = useReducer(initialState);\n   \n\n    return (\n        <AppContext.Provider\n            value={{\n                aboutMe: state.aboutMe,\n                // skills: state.skills,\n                // projects: state.projects,\n                dispatch\n            }}\n        >\n            {props.children}\n        </AppContext.Provider>\n    );\n};\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGzD,OAAO,MAAMC,UAAU,GAAGA,CAACC,KAAK,EAAEC,MAAM,KAAK;EACzC,IAAIC,OAAO,GAAG,MAAM;EACpBF,KAAK,CAACE,OAAO,GAAGA,OAAO;EACvB,OAAOF,KAAK;AAChB,CAAC;;AAGD;AAAAG,EAAA,GAPaJ,UAAU;AAQvB,MAAMK,YAAY,GAAG;EACjBF,OAAO,EAAG,MAAM;EAChBG,QAAQ,EAAG,MAAM;EACjBC,MAAM,EAAG;AACb,CAAC;;AAED;AACA,OAAO,MAAMC,UAAU,gBAAGZ,aAAa,EAAE;;AAEzC;AACA;AACA,OAAO,MAAMa,WAAW,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAClC;EACA,MAAM,CAACV,KAAK,EAAEW,QAAQ,CAAC,GAAGf,UAAU,CAACQ,YAAY,CAAC;EAGlD,oBACIN,OAAA,CAACS,UAAU,CAACK,QAAQ;IAChBC,KAAK,EAAE;MACHX,OAAO,EAAEF,KAAK,CAACE,OAAO;MACtB;MACA;MACAS;IACJ,CAAE;IAAAG,QAAA,EAEDL,KAAK,CAACK;EAAQ;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACG;AAE9B,CAAC;AAACR,EAAA,CAjBWF,WAAW;AAAAW,GAAA,GAAXX,WAAW;AAAA,IAAAL,EAAA,EAAAgB,GAAA;AAAAC,YAAA,CAAAjB,EAAA;AAAAiB,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
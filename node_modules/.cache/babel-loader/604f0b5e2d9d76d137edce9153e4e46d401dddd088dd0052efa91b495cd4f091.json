{"ast":null,"code":"var _jsxFileName = \"/Users/joseph/Documents/Work/personal/portfolio/src/context/AppContext.jsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useReducer } from 'react';\n\n// 1. Sets the initial state when the app loads\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  aboutMe: \"show\",\n  projects: \"hide\",\n  skills: \"hide\"\n};\n\n// 2. Creates the context this is the thing our components import and use to get the state\nexport const AppContext = /*#__PURE__*/createContext();\n\n// 3. Provider component - wraps the components we want to give access to the state\n// Accepts the children, which are the nested(wrapped) components\nexport const AppProvider = props => {\n  _s();\n  // 4. Sets up the app state. takes a reducer, and an initial state\n  const [state, dispatch] = useReducer(initialState);\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: {\n      aboutMe: state.aboutMe,\n      // skills: state.skills,\n      // projects: state.projects,\n      dispatch\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 9\n  }, this);\n};\n_s(AppProvider, \"GLYnMQ8Xkooi29FkxmARXYan304=\");\n_c = AppProvider;\nvar _c;\n$RefreshReg$(_c, \"AppProvider\");","map":{"version":3,"names":["React","createContext","useReducer","jsxDEV","_jsxDEV","initialState","aboutMe","projects","skills","AppContext","AppProvider","props","_s","state","dispatch","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/joseph/Documents/Work/personal/portfolio/src/context/AppContext.jsx"],"sourcesContent":["import React, { createContext, useReducer } from 'react';\n\n\n\n// 1. Sets the initial state when the app loads\nconst initialState = {\n    aboutMe : \"show\",\n    projects : \"hide\",\n    skills : \"hide\"\n};\n\n// 2. Creates the context this is the thing our components import and use to get the state\nexport const AppContext = createContext();\n\n// 3. Provider component - wraps the components we want to give access to the state\n// Accepts the children, which are the nested(wrapped) components\nexport const AppProvider = (props) => {\n    // 4. Sets up the app state. takes a reducer, and an initial state\n    const [state, dispatch] = useReducer(initialState);\n   \n\n    return (\n        <AppContext.Provider\n            value={{\n                aboutMe: state.aboutMe,\n                // skills: state.skills,\n                // projects: state.projects,\n                dispatch\n            }}\n        >\n            {props.children}\n        </AppContext.Provider>\n    );\n};\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,QAAQ,OAAO;;AAIxD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,YAAY,GAAG;EACjBC,OAAO,EAAG,MAAM;EAChBC,QAAQ,EAAG,MAAM;EACjBC,MAAM,EAAG;AACb,CAAC;;AAED;AACA,OAAO,MAAMC,UAAU,gBAAGR,aAAa,EAAE;;AAEzC;AACA;AACA,OAAO,MAAMS,WAAW,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAClC;EACA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,UAAU,CAACG,YAAY,CAAC;EAGlD,oBACID,OAAA,CAACK,UAAU,CAACM,QAAQ;IAChBC,KAAK,EAAE;MACHV,OAAO,EAAEO,KAAK,CAACP,OAAO;MACtB;MACA;MACAQ;IACJ,CAAE;IAAAG,QAAA,EAEDN,KAAK,CAACM;EAAQ;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACG;AAE9B,CAAC;AAACT,EAAA,CAjBWF,WAAW;AAAAY,EAAA,GAAXZ,WAAW;AAAA,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}